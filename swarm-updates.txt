Examples 

Update the images to a newer version 
docker service update --image myapp:1.2.1 <servicename> 

Adding and environment variable and remove a port 
docker service update --env-add NODE_ENV=production --publish-rm 8080 

Change number of replicas of two services 
docker service scale web=8 api=6 

========= HOW ??? ============

You just need to edit the YAML file, then use 

docker stack deploy -c file.yml <stackname> 

----------------------------- 

ALSO, 

using this command to create a service: 

- docker service create -p 8080:80 --name web nginx:1.13.7

Updates 
docker service scale web=5 - scale up the service  
docker service update --replicas=2 <name of service> - update service replicas
docker service update --image nginx:1.13.6 web - Update the image 
docker service update --publish-rm 8088 --publish-add 9090:80 web - update port 
docker service update --force web - roll through and replace the tasks. This helps to get arround an uneven ammount of workload on your nodes   
docker service update --image=nginx:perl <name of service> - update the image version  
docker service ps <name of service> - Notice the change 
docker service rollback <name of service> - Go back to previous image version 
docker container rm `docker container ls -aq` -f - to delete all running containers.
docker service rm <name of service> - To delete service 


 docker node update --label-add env=dev <hostname> - adding a label 
 docker node update --label-add disk=ssd <hostname> - adding a label 
 docker node inspect Worker1 --pretty - to inspect the hotname .. there you'll be able to see the labels 
 docker node update --label-add disk=slow --label-add env=uat Worker2  - adding 2 labels at once 
 
 To remove labels 
 # docker node update --label-rm env --label-rm disk worker1
# docker node update --label-rm env --label-rm disk worker2 

docker container ls -a --filter name=webserver -q | head -1 - To capture container ID


docker swarm leave --force 
docker swarm leave -f 


docker node promote worker1 - Promotes worker to master 

docker node update --availability drain worker1 -- Once a worker is drained, it stops receiving tasks from the master 
 docker node update --availability active worker1 -- Make the node active again 
 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
docker service create alpine 8.8.8.8 

docker service create: This command is used to create a new Docker service, which is a long-running task that can be replicated across multiple Docker nodes in a swarm.

alpine: This is the name of the Docker image that will be used to create the service. In this case, it refers to the Alpine Linux image, which is a lightweight Linux distribution commonly used in Docker containers.

8.8.8.8: This is an argument passed to the service create command. It specifies the IP address that will be assigned to the service. By assigning a specific IP address, you can control the network configuration for the service.

It's worth noting that the command you provided is a simplified example, and in a real-world scenario, you would typically specify additional options and configurations for the service, such as specifying the number of replicas, network settings, resource limits, etc.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   




docker service ls lists all the services running in the Docker Swarm cluster. It provides an overview of the services, including their names, number of replicas, image used, and other details. It doesn't show the individual tasks/containers running as part of each service.

docker service ps <name of service> lists the tasks/containers associated with a specific service. It shows detailed information about each task/container, such as the task ID, container ID, current state, and the node where the task is running. This command provides a more granular view of the service, allowing you to inspect the individual tasks that make up the service.

In summary, docker service ls provides an overview of all services, while docker service ps <name of service> gives you detailed information about the tasks/containers of a specific service.
