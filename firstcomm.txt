docker login 
docker logout 
docker version 
docker info --details about config and setup eg no of containers running   

docker ps -a (see all running containers) 
docker rm -f <name of container> 
docker pause <container name> -- Once a container is paused , you can't send traffic to it.  
docker unpause <container name>  

/var/lib/docker - where docker container is stored in the hard disk    
/var/lib/docker/image/overlay --- to see where the images are stored   

when uploading an image, images are uploaded using the port 5000 
touch {1..100}.txt - to create 100 files

Dockerfile is made in a union file system. (ufs) 

to search how many images are in the repo and latest you can use the command 
docker search httpd --limit=5  #where httpd is the name of the image  

To know the parameters of the image use 

docker inspect <image name> 

to check if it's an official image 
docker search <image name> --limit=5 -f is-official=true  

to see images which it's ratings are more than eg 700 
docker search <image name> --limit=5 -f is-official=true -f stars=700  

to see all the ID of containers 
docker ps -a -q 

To delete a container 
docker rm -f $(docker ps -a -q)






docker container create --name=<name of container> <image:<tag>> 
docker start <container name> -- to start the container  

docker run -d --name=<name of container> docker.io/<image:<tag>>  # Note , the "docker.io" is just the registry, it can be changed to any other registry eg redhat 

# Pulling an image from your private registry 
docker pull docker.io/geologicai/mpiimage:0.0.2 

to delete an image 
docker rmi <image name > 

============= in MYSQL the database is created at /var/lib/mysql ==========

docker container run --publish 80:80 nginx - keeps it running
docker container run --publish 80:80 --detach nginx - runs the cont in the environment  
docker container ls -a - shows containers stopped and running 
docker container run --publish 80:80 --detach --name webhost nginx  - Gives the container a name while running in the env 

docker container logs webhost  - shows the log events from the webhost container 

docker container top webhost  -- see the processes running on the container. The webhost is the name of the container 

docker container rm <name of container> -- used to remove stopped containers 
docker container rm -f <name of the container>  -- removes the contianer forcefully , running or not  

ps aux -- Shows all the running processes on a system

docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql ==starting up a mysql cont while using an env variable 
docker container logs db | grep PASSWORD  == To check for the password 


docker container inspect - shows metadata about a container(startup, config , volumes, networking etc) 
docker container stats - shows live performance data for all containers  

docker container run -it - to get into the shell of the container  

-t , -tty - stimulates a real terminal(similar to SSH)   
-i - Keeps session open so we can keep running more commands. 

docker container exec -it <name of container> /bin/bash - Run additional commands in existing containers   

docker container run -it --name <name of container> <image> bash  = This is to use an image to spin up a container. Docker exec is for existing cont. This is not for exisiting containers  


docker container exec -i --tty <name of container> /bin/bash  

docker container run -it --name dodi nginx bash   - This takes you to the shell of the cont , and when you exit the container, it stops automatically 
runs a container named dodi using the nginx image  


==================== PORT ============================ 
docker container port <name of container> - Shows you which ports are open in the container  

docker container inspect --format '{{ .NetworkSettings.IPAddress }}' <name of container >
 
=============== NETWORK ===================== 
docker network ls - shows networks 
docker network inspect <name of network to inspect>- insoects a newtowk  
docker network create <name of network> -- Creates a network
docker network create --driver  - creates a network  
docker network connect - Attach a network to a container 
docker network disconnect - Detach a network from container  

docker container run -d --name new_nginx --network my_app_net nginx  - creats a new container and adds it to a network  


========= IMAGES ====== 
docker image rmi <image1> <image2>   - To delete multiple images  

docker tag <image-name> <reponame/imagename> - to tag an image  

docker push <reponame/imagename> 

============================= 

docker system df - To see spaces used by img, cont and cache on your docker engine

docker system prune - to remove all stopped cont, unused images and cache 

docker system prune -a - To remove everything on your docker 

============================= 


