What is swarm? 

A server clustering solution that brings together differemt OS or hosts into a single managable unit so that we can ochestrate the lifecycle of our container. 

Divided into Manager Nodes and worker nodes. 

Manager Nodes: They have a database on them called Raft Database. It solves their configuration , and gives them all the information they need to have to be the
authority they need inside the swarm. 

docker swarm init - Initialize swarm  
docker service rm - to remove swarm services 
docker service ls - to see services started 

docker swarm init --advertise-addr <MANAGER IP> - Shop Ip's of Masters
docker swarm join-token worker  
docker swarm init | tee bootstrap.log - initialize swarm and put content in a boostrap.log file 
docker swarm join token manager - To add a node as a manager in the swarm (creates a token for the manager)
docker node ls - to see managers and workers 

Service: 
The defination of the tasks to execute on the manager or worker 
eg: 
docker service create --name webserver --replicas 2 nginx

Once u have deployed a servide to swarm, you are ready to use hr Docker cli to scale the number of containers
in the service. 

containers running in a service are known as tasks 

There are 2 ways to scale a service in a swarm: 
- docker service scale webserver=5
- docker service update --replicas 5 my webserver 


Global vs Replicated tasks 
Global- one task on every node 
Replicated- You specify the number of Identical tasks you want to run .












docker service ps psql -used to list the replicas (tasks) of a specific Docker service named "psql" within a Docker Swarm cluster.
When you run docker service ps psql, it will provide a table with detailed information about each replica (task) of the "psql" service, including:

ID: The unique ID of the replica.
NAME: The name of the replica.
IMAGE: The Docker image used for the replica.
NODE: The node where the replica is running.
ERROR: Any error message associated with the replica.
CURRENT STATE: The current state of the replica (e.g., Running, Completed, Shutdown).
ERRORS: The number of times the replica encountered errors.
PORTS: The published ports associated with the replica.


========================= MANAGER NODES =============================== 
- Dispatches tasks to workers 
- Perform ochestration and cluster managemnt functions required to maintain the desired state of the swarm 
- Elects a single leader to conduct ochestration tasks  
- Good to have odd number of managers , as 1 will be chosen as the manager

========================= WORKER NODES ================================= 
- An agent runs on eac hworker node and reports the tasks assigned to it 
- They receive and execute tasks dispatched from manager nodes 
- Notifies the manager node of the current state of its assigned tasks so that the manager can maintain the desired state of each worker.  
- Multiple masters are run so that if the manager node goes down, we dont loose our cluster. 







raft is a protocol   

Overlay Multi-Host Networking   

Overlay is a new networking driver. It's for intra communication
--driver overlay 
Optional IPsec (AES) encryption on network creation 
Each service above can be connected to multiple networks. (eg frontend and backend) 

TO TEST 

docker network create --driver overlay mydrupal 
docker network ls 
docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgres (more like starting a container)
docker service create --name drupal --network mydrupal -p 80:80 drupal 
docker service ls - Do this multiple times after the previous commands to see the power of the VP and Routing mesh power
watch docker service ls -- To constantly run your service commands to see if ther are any differences.  


Docker adds a new layer of abstraction to Swarm called Stacks 
Stacks accepts compose files as their dev=clerative defination for services, networks and volumes  

"docker stack deploy" is used instead of "docker service create" 
stacks manages all those objects for us including overlay network per stack. Adds stack name to the start of their name.  
new "deploy:" key in Compose file. Cant do "build:" 
compose ignores "deploy:", swarm ignores "build:"  

using a stack file example-voting-app-stack.yml , the ffg command will spin up a swarm 
docker stack deploy -c example-voting-app-stack.yml <stack name>  

If you change something in the stack file you can apply the code again and the stack will be updated  


======================== SECRETS STORAGE ================================ 
Swarm Raft DB is encrypted on Disk 
Only stored on Disk on Managed nodes
Default is Managers and Workers "control plane" is TLS + Manual Auth 
Secrets are first stored in Swarm and then assigned to a Service(S) 
Only containers in assigned service can see them.  

They look like files in containers but are actually in-memory fs  
./run/secrets/<secret_name> 
./run/secrets/<secret_alias> 

secrets are stored in the swarm db, it's a "swarm-only" thing. U can't have secrets without Swarm 
Local docker-compose can use file-based secrets, but that's not secure 

======= CREATING A SECRET ========================= 

You can have the secret in a file and then create a secret by pointing to that file. 
Example if a file with my secret is called psql_user.txt you can create a secret file pointing to it with the command: docker secret create psql_user psql_user.txt  

If you want to echo a password in, use te command : echo "myDBpassWORD" | docker secret create psql_pass -   
notice the "-" at the end which is telling it to read from the standard input. 


Creating a secret while spinning up a container 

docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres 

u can go to the container shell and take a look at the secret. 

To remove the secret, you can use 
docker service update --secret-rm 



======= CREATING A SECRET ========================= 

You can have the secret in a file and then create a secret by pointing to that file. 
Example if a file with my secret is called psql_user.txt you can create a secret file pointing to it with the command: docker secret create psql_user psql_user.txt  

If you want to echo a password in, use te command : echo "myDBpassWORD" | docker secret create psql_pass -   
notice the "-" at the end which is telling it to read from the standard input. 


Creating a secret while spinning up a container 

docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres 

u can go to the container shell and take a look at the secret. 

To remove the secret, you can use 
docker service update --secret-rm  

You can also use a compose file to start the secrets. 

YAML FILE 

version: '3.1'
services:

  drupal:
    image: drupal:8.2
    ports:
      - "8080:80"
    volumes:
      - drupal-modules:/var/www/html/modules
      - drupal-profiles:/var/www/html/profiles       
      - drupal-sites:/var/www/html/sites      
      - drupal-themes:/var/www/html/themes
 
  postgres:
    image: postgres:14.3
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/psql-pw  
    secrets:
      - psql-pw
    volumes:
      - drupal-data:/var/lib/postgresql/data

volumes:
  drupal-data:
  drupal-modules:
  drupal-profiles:
  drupal-sites:
  drupal-themes:

secrets:
  psql-pw: 
    external: true



create the secret first.  
#NOTE THE psql-pw on the yaml file 
echo "papi" | docker secret create psql-pw -
docker stack deploy -c docker-compose.yml <name your stack> 
 

NOTE: when we do "docker stack deploy" on an existing stack, it will deploy the changes as service updates. 

"--start-period" - Adds a buffer of time to allow a service startup before alarming on a failed check 








